<?php

namespace App\Models;

use Carbon\Carbon;
use Carbon\Traits\Date;
use Exception;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use function Livewire\after;
use function Symfony\Component\String\s;

class Evento extends Model
{
    use HasFactory, SoftDeletes;

    const TIPO_SCADENZA = 'scadenza';
    const TIPO_UDIENZA = 'udienza';

    const TIPO_APPUNTAMENTO = 'appuntamento';

    protected $table = 'eventi';

    protected $fillable = [
        'pratica_id',
        'user_id',
        'tipo',
        'data_ora',
        'motivo',
        'stato',
        'luogo',
        'reminder_at',
        'email_notification',
        'browser_notification',
        'google_event_id',
        'google_event_link',
    ];

    protected $casts = [
        'data_ora' => 'immutable_datetime:Y-m-d H:i:s',
        'reminder_at' => 'array',
        'email_notification' => 'boolean',
        'browser_notification' => 'boolean',
    ];

    protected $hidden = [
        'created_at',
        'updated_at',
        'deleted_at',
    ];

    public function pratica()
    {
        return $this->belongsTo(Pratica::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }


    // Aggiungi la relazione many-to-many
    public function invitati()
    {
        return $this->belongsToMany(User::class, 'evento_invitati')
            ->using(EventoInvitati::class)
            ->withTimestamps();
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::creating(function ($model) {
            if (!$model->user_id) {
                $model->user_id = auth()->id();
            }
        });
    }


}